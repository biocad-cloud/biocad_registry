{"gene_term":{"author":null,"declares":{"name":"gene_term","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"biocad_registry.R","Line":"2","Method":{"Method":"gene_term","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"gene_term"},"rna_term":{"author":null,"declares":{"name":"rna_term","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"biocad_registry.R","Line":"7","Method":{"Method":"rna_term","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"rna_term"},"protein_term":{"author":null,"declares":{"name":"protein_term","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"biocad_registry.R","Line":"12","Method":{"Method":"protein_term","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"protein_term"},"metabolite_term":{"author":null,"declares":{"name":"metabolite_term","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"biocad_registry.R","Line":"17","Method":{"Method":"metabolite_term","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"metabolite_term"},"molecule_terms":{"author":null,"declares":{"name":"molecule_terms","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"biocad_registry.R","Line":"25","Method":{"Method":"molecule_terms","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"\"Nucleic Acid\" \"RNA\" \"Polypeptide\" \"Metabolite\"","examples":"","keywords":[],"parameters":[],"returns":null,"see_also":"","title":"get vocabulary term id collection of multiple molecule types"},"molecule_entity":{"author":null,"declares":{"name":"molecule_entity","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"biocad_registry.R","Line":"32","Method":{"Method":"molecule_entity","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"the \"Nucleic Acid\", \"RNA\", \"Polypeptide\", \"Metabolite\" is belong to the molecule entity object.","examples":"","keywords":[],"parameters":[],"returns":null,"see_also":"","title":"the molecule entity term"},"reaction_model":{"author":null,"declares":{"name":"reaction_model","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"biocad_registry.R","Line":"36","Method":{"Method":"reaction_model","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"reaction_model"},"enzyme_regulation":{"author":null,"declares":{"name":"enzyme_regulation","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"biocad_registry.R","Line":"40","Method":{"Method":"enzyme_regulation","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"enzyme_regulation"},"open_registry":{"author":null,"declares":{"name":"open_registry","parameters":[{"name":"user","text":null},{"name":"passwd","text":null},{"name":"host","text":"'localhost'"},{"name":"port","text":"3306"},{"name":"dbname","text":"'cad_registry'"}],"sourceMap":{"File":"mysql.R","Line":"7","Method":{"Method":"open_registry","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"","keywords":[],"parameters":[{"name":"host","text":"the mysql server host"},{"name":"dbname","text":"the database name of the target mysql database,\r\nvalue may be ``cad_registry`` or ``biocad_registry``."}],"returns":null,"see_also":"","title":"open mysqli connection to biocad_registry"},".onLoad":{"author":null,"declares":{"name":".onLoad","parameters":[],"sourceMap":{"File":"zzz.R","Line":"11","Method":{"Method":".onLoad","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":".onLoad"},"export_enzymatic":{"author":null,"declares":{"name":"export_enzymatic","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"enzyme_km.R","Line":"1","Method":{"Method":"export_enzymatic","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"export_enzymatic"},"export_genomics_fasta":{"author":null,"declares":{"name":"export_genomics_fasta","parameters":[{"name":"biocad.registry","text":null},{"name":"parent.taxname","text":null},{"name":"fasta","text":"TRUE"}],"sourceMap":{"File":"genomics.R","Line":"1","Method":{"Method":"export_genomics_fasta","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"export_genomics_fasta"},"export_reactionLinks":{"author":null,"declares":{"name":"export_reactionLinks","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"reaction_links.R","Line":"1","Method":{"Method":"export_reactionLinks","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"export_reactionLinks"},"get_molecule_by_dbxref":{"author":null,"declares":{"name":"get_molecule_by_dbxref","parameters":[{"name":"registry","text":null},{"name":"db.xref","text":null},{"name":"dbname","text":"NULL"}],"sourceMap":{"File":"link.R","Line":"5","Method":{"Method":"get_molecule_by_dbxref","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"","keywords":[],"parameters":[],"returns":"an integer id of the target molecule, NULL when object not found.","see_also":"","title":"Get molecule id via a specific database cross reference link id"},"link_gene_proteins":{"author":null,"declares":{"name":"link_gene_proteins","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"link_gene_proteins.R","Line":"7","Method":{"Method":"link_gene_proteins","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"probabily there is no needs for links the protein back to its\r\nsource gene object, due to the reason of gene sequence could be reverse\r\ntranslates from the protein sequence.","examples":"","keywords":[],"parameters":[],"returns":null,"see_also":"","title":"Link the gene and protein parent\/child relationship"},"link_reaction_enzymes":{"author":null,"declares":{"name":"link_reaction_enzymes","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"link_reaction_enzymes.R","Line":"1","Method":{"Method":"link_reaction_enzymes","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"link_reaction_enzymes"},"link_reaction_metabolites":{"author":null,"declares":{"name":"link_reaction_metabolites","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"link_reaction_metabolites.R","Line":"3","Method":{"Method":"link_reaction_metabolites","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"link_reaction_metabolites"},"link_kinetics":{"author":null,"declares":{"name":"link_kinetics","parameters":[{"name":"registry","text":null}],"sourceMap":{"File":"link_kinetics.R","Line":"5","Method":{"Method":"link_kinetics","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"","keywords":[],"parameters":[{"name":"registry","text":"the mysql database connection to the biocad registry database."}],"returns":null,"see_also":"","title":"link the kinetics law with the enzyme and metabolite substrate molecules"},"imports_chebi":{"author":null,"declares":{"name":"imports_chebi","parameters":[{"name":"biocad.registry","text":null},{"name":"chebi","text":null}],"sourceMap":{"File":"chebi.R","Line":"8","Method":{"Method":"imports_chebi","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"","keywords":[],"parameters":[{"name":"chebi","text":"the chebi ontology OBO database, the metabolite\r\ncompound data will be extract from this database obejct."}],"returns":null,"see_also":"","title":"imports the metabolite set from chebi database"},"imports_kegg":{"author":null,"declares":{"name":"imports_kegg","parameters":[{"name":"biocad.registry","text":null},{"name":"kegg","text":null}],"sourceMap":{"File":"kegg.R","Line":"61","Method":{"Method":"imports_kegg","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"This function imports chemical compound data from KEGG database into a biocad\r\nregistry system, handling metabolite registration, cross-reference management,\r\nand compound metadata integration.","details":"The function performs these key operations:\r\n1. Initializes database terminology for metabolite entities\r\n2. Processes KEGG compound entries with progress tracking\r\n3. For each compound:\r\n- Extracts database cross-references (ChEBI, PubChem, CAS)\r\n- Builds standardized compound metadata structure\r\n- Checks for existing registry entries\r\n- Updates database with new compounds and related information\r\n4. Maintains cross-database consistency through:\r\n- KEGG-to-external database identifier mapping\r\n- Synonym management\r\n- Structural data preservation","examples":"#\\dontrun{\r\n\r\n# Import from KEGG API response\r\nimports_kegg(biocad_registry, kegg_compounds)\r\n# Import from parsed file\r\nimports_kegg(biocad_registry, read_kegg(\"compound.xml\"))\r\n\r\n#}","keywords":[],"parameters":[{"name":"biocad_registry","text":"A biocad database registry connection object"},{"name":"kegg","text":"KEGG compound data input. Can be either:\r\n- KEGG Compound object collection\r\n- List of parsed KEGG entries\r\n- Pipeline enumerator for stream processing"}],"returns":"Invisibly returns NULL. Mainly used for populating the biocad registry\r\nwith metabolite data and associated cross-references.","see_also":"","title":"Import KEGG compound data into biocad registry"},"imports_kegg_reaction":{"author":null,"declares":{"name":"imports_kegg_reaction","parameters":[{"name":"biocad.registry","text":null},{"name":"kegg","text":null}],"sourceMap":{"File":"kegg.R","Line":"117","Method":{"Method":"imports_kegg_reaction","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"imports_kegg_reaction"},"cast_kegg_reaction":{"author":null,"declares":{"name":"cast_kegg_reaction","parameters":[{"name":"rxn","text":null}],"sourceMap":{"File":"kegg.R","Line":"130","Method":{"Method":"cast_kegg_reaction","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"cast_kegg_reaction"},"imports_metacyc":{"author":null,"declares":{"name":"imports_metacyc","parameters":[{"name":"biocad.registry","text":null},{"name":"metacyc","text":null}],"sourceMap":{"File":"metacyc.R","Line":"5","Method":{"Method":"imports_metacyc","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"imports_metacyc"},"load_biocyc_proteins":{"author":null,"declares":{"name":"load_biocyc_proteins","parameters":[{"name":"biocad.registry","text":null},{"name":"metacyc","text":null}],"sourceMap":{"File":"metacyc.R","Line":"14","Method":{"Method":"load_biocyc_proteins","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"load_biocyc_proteins"},"load_biocyc_genes":{"author":null,"declares":{"name":"load_biocyc_genes","parameters":[{"name":"biocad.registry","text":null},{"name":"metacyc","text":null}],"sourceMap":{"File":"metacyc.R","Line":"130","Method":{"Method":"load_biocyc_genes","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"load_biocyc_genes"},"load_biocyc_reactions":{"author":null,"declares":{"name":"load_biocyc_reactions","parameters":[{"name":"biocad.registry","text":null},{"name":"metacyc","text":null}],"sourceMap":{"File":"metacyc.R","Line":"213","Method":{"Method":"load_biocyc_reactions","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"load_biocyc_reactions"},"load_biocyc_compounds":{"author":null,"declares":{"name":"load_biocyc_compounds","parameters":[{"name":"biocad.registry","text":null},{"name":"metacyc","text":null}],"sourceMap":{"File":"metacyc.R","Line":"250","Method":{"Method":"load_biocyc_compounds","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"load_biocyc_compounds"},"imports_pubchem":{"author":null,"declares":{"name":"imports_pubchem","parameters":[{"name":"biocad.registry","text":null},{"name":"pubchem","text":null}],"sourceMap":{"File":"pubchem.R","Line":"7","Method":{"Method":"imports_pubchem","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"imports_pubchem"},"imports_odor":{"author":null,"declares":{"name":"imports_odor","parameters":[{"name":"biocad.registry","text":null},{"name":"pubchem","text":null},{"name":"fast.check","text":"FALSE"}],"sourceMap":{"File":"pubchem.R","Line":"39","Method":{"Method":"imports_odor","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"imports_odor"},"imports_rhea":{"author":null,"declares":{"name":"imports_rhea","parameters":[{"name":"biocad.registry","text":null},{"name":"rhea","text":"'.\/rhea.rdf'"}],"sourceMap":{"File":"rhea.R","Line":"3","Method":{"Method":"imports_rhea","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"imports_rhea"},"imports_sabiork":{"author":null,"declares":{"name":"imports_sabiork","parameters":[{"name":"biocad.registry","text":null},{"name":"repo","text":null}],"sourceMap":{"File":"sabiork.R","Line":"53","Method":{"Method":"imports_sabiork","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"This function imports enzyme kinetic data from SABIO-RK SBML files into a biocad\r\nregistry database, handling model parsing, parameter extraction, and database\r\nrelationship mapping.","details":"The function performs these key operations:\r\n1. Processes SBML files from SABIO-RK database\r\n2. For each biochemical reaction:\r\n- Extracts kinetic parameters and enzyme information\r\n- Links reactions to existing substrate references via database cross-references\r\n- Stores complete kinetic models with environmental conditions (pH, temperature)\r\n- Maintains traceability through SABIO-RK identifiers\r\n3. Handles duplicate prevention using native database checks","examples":"#\\dontrun{\r\n\r\n# Import single SBML file\r\nimports_sabiork(biocad_registry, \"path\/to\/kinetics.xml\")\r\n# Batch import multiple files\r\nimports_sabiork(biocad_registry, c(\"file1.xml\", \"file2.xml\"))\r\n\r\n#}","keywords":[],"parameters":[{"name":"biocad_registry","text":"A biocad database registry connection object"},{"name":"repo","text":"Input specification for kinetic data. Can be either:\r\n- Character vector of SBML file paths\r\n- Pipeline enumerator for stream processing"}],"returns":"Invisibly returns NULL. Mainly used for populating the biocad registry\r\ndatabase with kinetic data.","see_also":"","title":"Import enzymatic kinetics models from SABIO-RK"},"__find_substrate_id":{"author":null,"declares":{"name":"__find_substrate_id","parameters":[{"name":"args","text":null},{"name":"xrefs","text":null}],"sourceMap":{"File":"sabiork.R","Line":"115","Method":{"Method":"__find_substrate_id","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"__find_substrate_id"},"imports_uniprot_obsolete":{"author":null,"declares":{"name":"imports_uniprot_obsolete","parameters":[{"name":"biocad.registry","text":null},{"name":"uniprot","text":null},{"name":"fast.check","text":"FALSE"}],"sourceMap":{"File":"uniprot.R","Line":"54","Method":{"Method":"imports_uniprot_obsolete","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"This helper function imports protein data from UniProt into a biocad registry database,\r\nhandling sequence embeddings, cross-references, subcellular locations, and keyword associations.","details":"The function performs these main operations:\r\n1. Initializes sequence embedding transformer (SGT) for protein sequences\r\n2. Sets up database terminology references for proteins\r\n3. Processes input proteins with progress tracking where possible\r\n4. For each protein:\r\n- Retrieves sequence, descriptions, locations, and cross-references from UniProt\r\n- Checks existing records if fast_check is enabled\r\n- Creates new molecule entry if not existing\r\n- Adds keyword associations and cross-references (both UniProt and external databases)\r\n- Generates and stores sequence graph embeddings\r\n- Records subcellular localization information","examples":"#\\dontrun{\r\n\r\n# Import single protein with progress tracking\r\nimports_uniprot(biocad_registry, \"P12345\")\r\n# Batch import with fast checking\r\nimports_uniprot(biocad_registry, c(\"P12345\", \"Q67890\"), fast_check = TRUE)\r\n\r\n#}","keywords":[],"parameters":[{"name":"biocad_registry","text":"A biocad database registry connection object."},{"name":"uniprot","text":"UniProt protein accession(s). Can be either:\r\n- A character vector of UniProt IDs\r\n- A pipeline enumerator for stream processing"},{"name":"fast_check","text":"Logical. If TRUE, skips proteins already existing in the database\r\nusing quick verification. Default = FALSE."}],"returns":"Invisibly returns NULL. Mainly used for its side effects of populating\r\nthe biocad registry database.","see_also":"","title":"Import UniProt proteins into biocad registry database"},"imports_genebank.obsolete":{"author":null,"declares":{"name":"imports_genebank.obsolete","parameters":[{"name":"biocad.registry","text":null},{"name":"genebank","text":null}],"sourceMap":{"File":"genbank.R","Line":"12","Method":{"Method":"imports_genebank.obsolete","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"this function will make association between the gene\/rna\r\nand uniprot protein molecules.","examples":"","keywords":[],"parameters":[{"name":"genebank","text":"A ncbi genebank data object, all CDS\/rna features inside\r\nthis genebank data object will be extract and imports into\r\ndatabase."}],"returns":null,"see_also":"","title":"imports gene from ncbi genbank file"},"save_nucleotide_embedding":{"author":null,"declares":{"name":"save_nucleotide_embedding","parameters":[{"name":"biocad.registry","text":null},{"name":"mol.id","text":null},{"name":"dnaseq","text":null},{"name":"sgt","text":null},{"name":"Nucleotide.graph","text":null}],"sourceMap":{"File":"genbank.R","Line":"89","Method":{"Method":"save_nucleotide_embedding","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"save_nucleotide_embedding"},"imports_genomic_refseq":{"author":null,"declares":{"name":"imports_genomic_refseq","parameters":[{"name":"biocad.registry","text":null},{"name":"gbff","text":null}],"sourceMap":{"File":"genomic.R","Line":"1","Method":{"Method":"imports_genomic_refseq","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"imports_genomic_refseq"},"check_metabolite":{"author":null,"declares":{"name":"check_metabolite","parameters":[{"name":"biocad.registry","text":null},{"name":"compound","text":null}],"sourceMap":{"File":"check_metabolite.R","Line":"42","Method":{"Method":"check_metabolite","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"Searches for a metabolite in the BioCAD registry database by cross-references\r\n(xrefs) and exact mass. If no direct xref matches are found, falls back to\r\nchecking common names and synonyms. Returns database ID if found.","details":"The function performs the following steps:\r\n\\enumerate{\r\n\\item Extracts and validates chemical formula (calculates exact mass)\r\n\\item Queries database using cross-reference identifiers (xrefs)\r\n\\item Performs mass tolerance search (±1 Da)\r\n\\item If xref search fails, calls \\code{check_metabolite_synonym} to check\r\nby name and synonyms\r\n}","examples":"#\\dontrun{\r\n\r\n# Assume biocad_registry is an established database connection\r\ncompound <- list(\r\nname = \"glucose\",\r\nformula = \"C6H12O6\",\r\nxref = list(KEGG = \"C00031\", CHEBI = \"CHEBI:4167\"),\r\nsynonym = c(\"dextrose\", \"blood sugar\")\r\n)\r\ncheck_metabolite(biocad_registry, compound)\r\n\r\n#}","keywords":[],"parameters":[{"name":"biocad_registry","text":"A database connection object representing the BioCAD\r\nregistry database."},{"name":"compound","text":"A list containing metabolite information with the following\r\nelements:\r\n\\itemize{\r\n\\item{xref - List of cross-references (database identifiers)}\r\n\\item{formula - Chemical formula string}\r\n\\item{name - Common name of the compound}\r\n\\item{synonym - Vector of alternative names\/synonyms}\r\n}"}],"returns":"An integer representing the unique database ID of the matched\r\ncompound. Returns \\code{NULL} if no matching metabolite is found\r\nin the database.","see_also":"","title":"Check if metabolite exists in database"},"check_metabolite_synonym":{"author":null,"declares":{"name":"check_metabolite_synonym","parameters":[{"name":"biocad.registry","text":null},{"name":"compound","text":null}],"sourceMap":{"File":"check_metabolite.R","Line":"111","Method":{"Method":"check_metabolite_synonym","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"Helper function that searches for metabolites by name and synonyms when\r\ndirect xref matching fails. Uses exact mass and MD5 hashing of synonyms\r\nfor efficient lookup.","details":"Operates in two phases:\r\n\\enumerate{\r\n\\item Direct name match with mass tolerance\r\n\\item MD5 hash-based synonym search if name match fails\r\n}","examples":"","keywords":["internal"],"parameters":[{"name":"biocad_registry","text":"A database connection object for BioCAD registry"},{"name":"compound","text":"Compound list (see \\code{check_metabolite} for structure)"}],"returns":"An integer database ID if match found by name\/synonym, otherwise\r\n\\code{NULL}.","see_also":"","title":"Internal metabolite synonym checker"},"find_molecule":{"author":null,"declares":{"name":"find_molecule","parameters":[{"name":"biocad.registry","text":null},{"name":"meta","text":null},{"name":"xref.id","text":null}],"sourceMap":{"File":"find_molecule.R","Line":"55","Method":{"Method":"find_molecule","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"This function searches for a metabolite in the BioCAD registry using cross-referencing IDs.\r\nIf not found, it attempts to register a new metabolite entry with provided metadata.","details":"","examples":"#\\dontrun{\r\n\r\nresult <- find_molecule(\r\nbiocad_registry = my_registry,\r\nmeta = list(\r\nname = \"ATP\",\r\nformula = \"C10H16N5O13P3\",\r\ndescription = \"Adenosine triphosphate\"\r\n),\r\nxref_id = \"CHEBI:15422\"\r\n)\r\n\r\n#}","keywords":[],"parameters":[{"name":"biocad_registry","text":"A BioCAD registry connection object representing the database interface."},{"name":"meta","text":"A list containing metabolite metadata. Expected elements:\r\n\\itemize{\r\n\\item \\code{name}: (string) Common name of the metabolite\r\n\\item \\code{formula}: (string) Chemical formula\r\n\\item \\code{description}: (string) Optional descriptive text\r\n}"},{"name":"xref_id","text":"(string) Cross-referencing identifier used for database lookup"}],"returns":"Returns a metabolite object if found\/registered successfully. Returns \\code{NULL} if:\r\n\\itemize{\r\n\\item Metabolite not found and failed to register\r\n\\item Invalid input parameters\r\n\\item Database errors occur\r\n}","see_also":"\\code{\\link{check_metabolite}} for primary lookup logic","title":"Find or Register a Target Metabolite in BioCAD Registry"},"__push_compound_metadata":{"author":null,"declares":{"name":"__push_compound_metadata","parameters":[{"name":"biocad.registry","text":null},{"name":"compound","text":null},{"name":"mol","text":null}],"sourceMap":{"File":"push_compound_metadata.R","Line":"87","Method":{"Method":"__push_compound_metadata","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"This function stores compound metadata into a biocad registry, updating\r\nseveral related tables including sequence_graph, db_xrefs, and synonyms.","details":"The `compound` parameter must be a structured list with the following fields:\r\n```r\r\nlist(\r\nID = \"unique-id\",               # Required: Unique identifier (character)\r\nformula = \"formula-string\",     # Required: Chemical formula (character)\r\nexact_mass = 0,                 # Required: Exact mass (numeric)\r\nname = \"name_string\",           # Required: Common name (character)\r\nIUPACName = \"name_string\",      # Required: IUPAC name (character)\r\ndescription = \"description_string\",  # Optional: Description (character)\r\nsynonym = c(\"synonyms\", \"names\"),    # Optional: Character vector of synonyms\r\nxref = list(                    # Optional: Cross-references to external databases\r\nchebi = \"\",                 # Use \"\" or omit if unavailable\r\nKEGG = \"\",\r\npubchem = \"\",\r\nHMDB = \"\",\r\nWikipedia = \"\",\r\nlipidmaps = \"\",\r\nMeSH = \"\",\r\nMetaCyc = \"\",\r\nfoodb = \"\",\r\nCAS = \"\",\r\nInChIkey = \"\",              # Note: InChIkey\/InChI\/SMILES are stripped from xref\r\nInChI = \"\",                 #   and processed separately\r\nSMILES = \"\"\r\n)\r\n)\r\n```\r\n### Processing Logic:\r\n1. ​**Structure Handling**:\r\n- SMILES strings are parsed (non-strictly) and stored in `sequence_graph`\r\nif valid. Invalid SMILES are skipped.\r\n- InChIkey, InChI, and SMILES fields are removed from `xref` to avoid\r\nduplication; SMILES is explicitly stored in `sequence_graph`.\r\n2. ​**Cross-References**:\r\n- Valid `xref` entries (non-empty strings) are added to `db_xrefs`,\r\nlinked to the molecule's `id`. Each entry is checked for duplicates\r\nbefore insertion.\r\n3. ​**Synonyms**:\r\n- Synonyms are stored in the `synonym` table with MD5 hashes to prevent\r\nduplicates. Only English (`lang = 'en'`) synonyms are supported.","examples":"#\\dontrun{\r\n\r\n# Assume `registry` is a pre-configured biocad_registry\r\ncompound <- list(\r\nID = \"C00001\",\r\nformula = \"H2O\",\r\nexact_mass = 18.0106,\r\nname = \"Water\",\r\nIUPACName = \"Oxidane\",\r\nsynonym = c(\"H2O\", \"Dihydrogen monoxide\"),\r\nxref = list(pubchem = \"962\", KEGG = \"C00001\")\r\n)\r\nmol <- list(id = \"molecule_123\")  # Pretend this is from biocad_registry\r\n__push_compound_metadata(registry, compound, mol)\r\n\r\n#}","keywords":[],"parameters":[{"name":"biocad_registry","text":"An object representing the biocad registry database\r\nwhere metadata will be stored. Must provide access to tables\r\n\"sequence_graph\", \"db_xrefs\", and \"synonym\"."},{"name":"compound","text":"A list containing the compound's metadata. Must follow the\r\nstructure specified in the Details section."},{"name":"mol","text":"A molecule record from the current `biocad_registry`. Must contain\r\na character `id` property to associate metadata with this molecule."}],"returns":"Invisibly returns `NULL`. This function is called for its side effects.","see_also":"","title":"Save compound metadata to a biocad registry"},"push_reaction":{"author":null,"declares":{"name":"push_reaction","parameters":[{"name":"biocad.registry","text":null},{"name":"reaction","text":null},{"name":"source.db","text":null}],"sourceMap":{"File":"push_reactions.R","Line":"81","Method":{"Method":"push_reaction","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"\r\n\r\nThis function adds or updates a reaction entry in the biocad registry database,\r\nincluding associated enzymes, database cross-references, and metabolite compounds.","details":"The `reaction` argument must be a list with the following structure:\r\n```r\r\nlist(\r\nentry = \"unique_id\",                 # Unique identifier for the reaction (string)\r\ndefinition = \"name\",                  # Reaction name or equation (string)\r\ncomment = \"description_string\",       # Optional description or notes (string)\r\nenzyme = list(\"ec_number1\", ...),     # List of EC numbers (strings) for enzymatic regulation\r\ndb_xrefs = list(                      # List of cross-references to external databases\r\nlist(name = \"dbname\", text = \"xref_id\"),\r\n...\r\n),\r\ncompounds = list(                     # List of compounds involved in the reaction\r\nlist(\r\nside = \"role_string\",           # Compound role (e.g., \"substrate\", \"product\", \"*\" for unknown)\r\ncompound = list(                # Compound details\r\nentry = \"compound_id\",\r\nname = \"compound_name\",\r\nformula = \"chemical_formula\",\r\nfactor = stoichiometric_factor  # Numeric (default = 1.0 if missing)\r\n)\r\n),\r\n...\r\n)\r\n)\r\n```\r\n- If a reaction with the same `entry` exists, it will be ​**updated**​ with new data.\r\n- Enzymes, cross-references, and compounds are linked to the reaction entry. Duplicates are skipped.\r\n- Compounds with `side = \"*\"` are ignored (used for placeholder entries).","examples":"#\\dontrun{\r\n\r\n# Example reaction data\r\nreaction_data <- list(\r\nentry = \"R00001\",\r\ndefinition = \"ATP + H2O -> ADP + Phosphate\",\r\ncomment = \"Hydrolysis of ATP\",\r\nenzyme = list(\"3.6.1.3\"),\r\ndb_xrefs = list(list(name = \"KEGG\", text = \"R00001\")),\r\ncompounds = list(\r\nlist(\r\nside = \"substrate\",\r\ncompound = list(entry = \"C00002\", name = \"ATP\", formula = \"C10H16N5O13P3\", factor = 1)\r\n),\r\nlist(\r\nside = \"product\",\r\ncompound = list(entry = \"C00008\", name = \"ADP\", formula = \"C10H15N5O10P2\", factor = 1)\r\n)\r\n)\r\n)\r\n# Push to database\r\npush_reaction(biocad_registry = my_registry, reaction = reaction_data)\r\n\r\n#}","keywords":[],"parameters":[{"name":"biocad_registry","text":"An object representing the connection to the biocad registry database."},{"name":"reaction","text":"A list containing the reaction data to be pushed into the database.\r\nSee \"Details\" for the required structure."},{"name":"source_db","text":"integer key reference to the vocabulary term table for reference to\r\nthe name of the source data of current reaction model data"}],"returns":"Invisibly returns `NULL`. The function's primary purpose is to modify the database.","see_also":"- Use [link_reaction_metabolites()] to resolve compound IDs after pushing reactions.\r\n- See the database schema documentation for table structures.","title":"Push a single reaction model into the biocad registry database"},"get_genbank":{"author":null,"declares":{"name":"get_genbank","parameters":[{"name":"asm.id","text":null},{"name":"repo.dir","text":"'.\/'"}],"sourceMap":{"File":"ncbi_ftp.R","Line":"37","Method":{"Method":"get_genbank","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"This helper function constructs the NCBI FTP path for a given assembly ID, retrieves\r\nthe corresponding GenBank genomic file (*.gbff.gz), and downloads it to a local directory.","details":"The function:\r\n\\enumerate{\r\n\\item Parses the assembly ID into prefix and numeric components\r\n\\item Constructs the NCBI FTP directory path using the ID structure\r\n\\item Retrieves the compressed GenBank file (*_genomic.gbff.gz)\r\n\\item Downloads the file to the specified local directory\r\n}","examples":"#\\dontrun{\r\n\r\n# Download assembly GCF_123456789 to the current directory\r\nget_genbank(\"GCF_123456789\")\r\n# Save to a custom directory\r\nget_genbank(\"GCA_987654321\", repo_dir = \"path\/to\/genbank_files\")\r\n\r\n#}","keywords":[],"parameters":[{"name":"asm_id","text":"Character. NCBI GenBank assembly accession ID in the format \"prefix_Integers\"\r\n(e.g., \"GCF_123456789\"). The prefix typically indicates the assembly type (e.g., GCF\/GCA),\r\nfollowed by a 9+ digit identifier."},{"name":"repo_dir","text":"Character. Local directory path to save the downloaded file.\r\nDefaults to the current working directory (\".\/\")."}],"returns":"Invisibly returns the full path to the downloaded file. Primarily called for\r\nits side effect of downloading the GenBank file to the specified directory.","see_also":"","title":"Download GenBank Assembly File from NCBI FTP Server"}}