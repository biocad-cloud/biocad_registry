{"gene_term":{"author":null,"declares":{"name":"gene_term","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"biocad_registry.R","Line":"2","Method":{"Method":"gene_term","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":null,"keywords":[],"parameters":[],"returns":null,"see_also":null,"title":"get vocabulary term id of ``Nucleic Acid``"},"rna_term":{"author":null,"declares":{"name":"rna_term","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"biocad_registry.R","Line":"7","Method":{"Method":"rna_term","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":null,"keywords":[],"parameters":[],"returns":null,"see_also":null,"title":"get vocabulary term id of ``RNA``"},"protein_term":{"author":null,"declares":{"name":"protein_term","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"biocad_registry.R","Line":"12","Method":{"Method":"protein_term","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":null,"keywords":[],"parameters":[],"returns":null,"see_also":null,"title":"get vocabulary term id of ``Polypeptide``"},"metabolite_term":{"author":null,"declares":{"name":"metabolite_term","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"biocad_registry.R","Line":"17","Method":{"Method":"metabolite_term","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":null,"keywords":[],"parameters":[],"returns":null,"see_also":null,"title":"get vocabulary term id of ``Metabolite``"},"molecule_terms":{"author":null,"declares":{"name":"molecule_terms","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"biocad_registry.R","Line":"25","Method":{"Method":"molecule_terms","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"\"Nucleic Acid\" \"RNA\" \"Polypeptide\" \"Metabolite\"","examples":null,"keywords":[],"parameters":[],"returns":null,"see_also":null,"title":"get vocabulary term id collection of multiple molecule types"},"molecule_entity":{"author":null,"declares":{"name":"molecule_entity","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"biocad_registry.R","Line":"32","Method":{"Method":"molecule_entity","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"the \"Nucleic Acid\", \"RNA\", \"Polypeptide\", \"Metabolite\" is belong to the molecule entity object.","examples":null,"keywords":[],"parameters":[],"returns":null,"see_also":null,"title":"the molecule entity term"},"reaction_model":{"author":null,"declares":{"name":"reaction_model","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"biocad_registry.R","Line":"36","Method":{"Method":"reaction_model","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"reaction_model"},"enzyme_regulation":{"author":null,"declares":{"name":"enzyme_regulation","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"biocad_registry.R","Line":"40","Method":{"Method":"enzyme_regulation","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"enzyme_regulation"},"open_registry":{"author":null,"declares":{"name":"open_registry","parameters":[{"name":"user","text":null},{"name":"passwd","text":null},{"name":"host","text":"'localhost'"},{"name":"port","text":"3306"},{"name":"dbname","text":"'cad_registry'"}],"sourceMap":{"File":"mysql.R","Line":"7","Method":{"Method":"open_registry","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":null,"keywords":[],"parameters":[{"name":"host","text":"the mysql server host"},{"name":"dbname","text":"the database name of the target mysql database, value may be ``cad_registry`` or ``biocad_registry``."}],"returns":null,"see_also":null,"title":"open mysqli connection to biocad_registry"},".onLoad":{"author":null,"declares":{"name":".onLoad","parameters":[],"sourceMap":{"File":"zzz.R","Line":"11","Method":{"Method":".onLoad","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":".onLoad"},"export_enzymatic":{"author":null,"declares":{"name":"export_enzymatic","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"enzyme_km.R","Line":"1","Method":{"Method":"export_enzymatic","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"export_enzymatic"},"export_genomics_fasta":{"author":null,"declares":{"name":"export_genomics_fasta","parameters":[{"name":"biocad.registry","text":null},{"name":"parent.taxname","text":null},{"name":"fasta","text":"TRUE"}],"sourceMap":{"File":"genomics.R","Line":"1","Method":{"Method":"export_genomics_fasta","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"export_genomics_fasta"},"export_reactionLinks":{"author":null,"declares":{"name":"export_reactionLinks","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"reaction_links.R","Line":"1","Method":{"Method":"export_reactionLinks","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"export_reactionLinks"},"get_molecule_by_dbxref":{"author":null,"declares":{"name":"get_molecule_by_dbxref","parameters":[{"name":"registry","text":null},{"name":"db.xref","text":null},{"name":"dbname","text":"NULL"}],"sourceMap":{"File":"link.R","Line":"5","Method":{"Method":"get_molecule_by_dbxref","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":null,"keywords":[],"parameters":[],"returns":"an integer id of the target molecule, NULL when object not found.","see_also":null,"title":"Get molecule id via a specific database cross reference link id"},"link_gene_proteins":{"author":null,"declares":{"name":"link_gene_proteins","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"link_gene_proteins.R","Line":"7","Method":{"Method":"link_gene_proteins","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"probabily there is no needs for links the protein back to its source gene object, due to the reason of gene sequence could be reverse translates from the protein sequence.","examples":null,"keywords":[],"parameters":[],"returns":null,"see_also":null,"title":"Link the gene and protein parent\/child relationship"},"link_reaction_enzymes":{"author":null,"declares":{"name":"link_reaction_enzymes","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"link_reaction_enzymes.R","Line":"1","Method":{"Method":"link_reaction_enzymes","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"link_reaction_enzymes"},"link_reaction_metabolites":{"author":null,"declares":{"name":"link_reaction_metabolites","parameters":[{"name":"biocad.registry","text":null}],"sourceMap":{"File":"link_reaction_metabolites.R","Line":"3","Method":{"Method":"link_reaction_metabolites","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":null,"keywords":[],"parameters":[],"returns":null,"see_also":null,"title":"Set molecule id link"},"imports_chebi":{"author":null,"declares":{"name":"imports_chebi","parameters":[{"name":"biocad.registry","text":null},{"name":"chebi","text":null}],"sourceMap":{"File":"chebi.R","Line":"8","Method":{"Method":"imports_chebi","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":null,"keywords":[],"parameters":[{"name":"chebi","text":"the chebi ontology OBO database, the metabolite compound data will be extract from this database obejct."}],"returns":null,"see_also":null,"title":"imports the metabolite set from chebi database"},"imports_kegg":{"author":null,"declares":{"name":"imports_kegg","parameters":[{"name":"biocad.registry","text":null},{"name":"kegg","text":null}],"sourceMap":{"File":"kegg.R","Line":"61","Method":{"Method":"imports_kegg","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"The function performs these key operations: 1. Initializes database terminology for metabolite entities 2. Processes KEGG compound entries with progress tracking 3. For each compound: - Extracts database cross-references (ChEBI, PubChem, CAS) - Builds standardized compound metadata structure - Checks for existing registry entries - Updates database with new compounds and related information 4. Maintains cross-database consistency through: - KEGG-to-external database identifier mapping - Synonym management - Structural data preservation","examples":null,"keywords":[],"parameters":[{"name":"biocad_registry","text":"A biocad database registry connection object"},{"name":"kegg","text":"KEGG compound data input. Can be either: - KEGG Compound object collection - List of parsed KEGG entries - Pipeline enumerator for stream processing"}],"returns":"Invisibly returns NULL. Mainly used for populating the biocad registry with metabolite data and associated cross-references.","see_also":null,"title":"Import KEGG compound data into biocad registry This function imports chemical compound data from KEGG database into a biocad registry system, handling metabolite registration, cross-reference management, and compound metadata integration."},"imports_kegg_reaction":{"author":null,"declares":{"name":"imports_kegg_reaction","parameters":[{"name":"biocad.registry","text":null},{"name":"kegg","text":null}],"sourceMap":{"File":"kegg.R","Line":"117","Method":{"Method":"imports_kegg_reaction","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"imports_kegg_reaction"},"cast_kegg_reaction":{"author":null,"declares":{"name":"cast_kegg_reaction","parameters":[{"name":"rxn","text":null}],"sourceMap":{"File":"kegg.R","Line":"130","Method":{"Method":"cast_kegg_reaction","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"cast_kegg_reaction"},"imports_metacyc":{"author":null,"declares":{"name":"imports_metacyc","parameters":[{"name":"biocad.registry","text":null},{"name":"metacyc","text":null}],"sourceMap":{"File":"metacyc.R","Line":"5","Method":{"Method":"imports_metacyc","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":null,"keywords":[],"parameters":[],"returns":null,"see_also":null,"title":"helper function for imports the metacyc molecules and reactions"},"load_biocyc_proteins":{"author":null,"declares":{"name":"load_biocyc_proteins","parameters":[{"name":"biocad.registry","text":null},{"name":"metacyc","text":null}],"sourceMap":{"File":"metacyc.R","Line":"14","Method":{"Method":"load_biocyc_proteins","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"load_biocyc_proteins"},"load_biocyc_genes":{"author":null,"declares":{"name":"load_biocyc_genes","parameters":[{"name":"biocad.registry","text":null},{"name":"metacyc","text":null}],"sourceMap":{"File":"metacyc.R","Line":"130","Method":{"Method":"load_biocyc_genes","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"load_biocyc_genes"},"load_biocyc_reactions":{"author":null,"declares":{"name":"load_biocyc_reactions","parameters":[{"name":"biocad.registry","text":null},{"name":"metacyc","text":null}],"sourceMap":{"File":"metacyc.R","Line":"213","Method":{"Method":"load_biocyc_reactions","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"load_biocyc_reactions"},"load_biocyc_compounds":{"author":null,"declares":{"name":"load_biocyc_compounds","parameters":[{"name":"biocad.registry","text":null},{"name":"metacyc","text":null}],"sourceMap":{"File":"metacyc.R","Line":"250","Method":{"Method":"load_biocyc_compounds","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":null,"keywords":[],"parameters":[],"returns":null,"see_also":null,"title":"load and imports compounds from the metacyc database"},"imports_pubchem":{"author":null,"declares":{"name":"imports_pubchem","parameters":[{"name":"biocad.registry","text":null},{"name":"pubchem","text":null}],"sourceMap":{"File":"pubchem.R","Line":"7","Method":{"Method":"imports_pubchem","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":null,"keywords":[],"parameters":[],"returns":null,"see_also":null,"title":"imports the reference metabolite set from pubchem database"},"imports_odor":{"author":null,"declares":{"name":"imports_odor","parameters":[{"name":"biocad.registry","text":null},{"name":"pubchem","text":null},{"name":"fast.check","text":"FALSE"}],"sourceMap":{"File":"pubchem.R","Line":"39","Method":{"Method":"imports_odor","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"imports_odor"},"imports_rhea":{"author":null,"declares":{"name":"imports_rhea","parameters":[{"name":"biocad.registry","text":null},{"name":"rhea","text":"'.\/rhea.rdf'"}],"sourceMap":{"File":"rhea.R","Line":"3","Method":{"Method":"imports_rhea","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":null,"keywords":[],"parameters":[],"returns":null,"see_also":null,"title":"imports the rhea reaction database"},"imports_sabiork":{"author":null,"declares":{"name":"imports_sabiork","parameters":[{"name":"biocad.registry","text":null},{"name":"repo","text":null}],"sourceMap":{"File":"sabiork.R","Line":"53","Method":{"Method":"imports_sabiork","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"The function performs these key operations: 1. Processes SBML files from SABIO-RK database 2. For each biochemical reaction: - Extracts kinetic parameters and enzyme information - Links reactions to existing substrate references via database cross-references - Stores complete kinetic models with environmental conditions (pH, temperature) - Maintains traceability through SABIO-RK identifiers 3. Handles duplicate prevention using native database checks","examples":null,"keywords":[],"parameters":[{"name":"biocad_registry","text":"A biocad database registry connection object"},{"name":"repo","text":"Input specification for kinetic data. Can be either: - Character vector of SBML file paths - Pipeline enumerator for stream processing"}],"returns":"Invisibly returns NULL. Mainly used for populating the biocad registry database with kinetic data.","see_also":null,"title":"Import enzymatic kinetics models from SABIO-RK This function imports enzyme kinetic data from SABIO-RK SBML files into a biocad registry database, handling model parsing, parameter extraction, and database relationship mapping."},"__find_substrate_id":{"author":null,"declares":{"name":"__find_substrate_id","parameters":[{"name":"args","text":null},{"name":"xrefs","text":null}],"sourceMap":{"File":"sabiork.R","Line":"115","Method":{"Method":"__find_substrate_id","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"__find_substrate_id"},"imports_uniprot_obsolete":{"author":null,"declares":{"name":"imports_uniprot_obsolete","parameters":[{"name":"biocad.registry","text":null},{"name":"uniprot","text":null},{"name":"fast.check","text":"FALSE"}],"sourceMap":{"File":"uniprot.R","Line":"54","Method":{"Method":"imports_uniprot_obsolete","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"The function performs these main operations: 1. Initializes sequence embedding transformer (SGT) for protein sequences 2. Sets up database terminology references for proteins 3. Processes input proteins with progress tracking where possible 4. For each protein: - Retrieves sequence, descriptions, locations, and cross-references from UniProt - Checks existing records if fast_check is enabled - Creates new molecule entry if not existing - Adds keyword associations and cross-references (both UniProt and external databases) - Generates and stores sequence graph embeddings - Records subcellular localization information","examples":null,"keywords":[],"parameters":[{"name":"biocad_registry","text":"A biocad database registry connection object."},{"name":"uniprot","text":"UniProt protein accession(s). Can be either: - A character vector of UniProt IDs - A pipeline enumerator for stream processing"},{"name":"fast_check","text":"Logical. If TRUE, skips proteins already existing in the database using quick verification. Default = FALSE."}],"returns":"Invisibly returns NULL. Mainly used for its side effects of populating the biocad registry database.","see_also":null,"title":"Import UniProt proteins into biocad registry database This helper function imports protein data from UniProt into a biocad registry database, handling sequence embeddings, cross-references, subcellular locations, and keyword associations."},"imports_genebank.obsolete":{"author":null,"declares":{"name":"imports_genebank.obsolete","parameters":[{"name":"biocad.registry","text":null},{"name":"genebank","text":null}],"sourceMap":{"File":"genbank.R","Line":"12","Method":{"Method":"imports_genebank.obsolete","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"this function will make association between the gene\/rna and uniprot protein molecules.","examples":null,"keywords":[],"parameters":[{"name":"genebank","text":"A ncbi genebank data object, all CDS\/rna features inside this genebank data object will be extract and imports into database."}],"returns":null,"see_also":null,"title":"imports gene from ncbi genbank file"},"save_nucleotide_embedding":{"author":null,"declares":{"name":"save_nucleotide_embedding","parameters":[{"name":"biocad.registry","text":null},{"name":"mol.id","text":null},{"name":"dnaseq","text":null},{"name":"sgt","text":null},{"name":"Nucleotide.graph","text":null}],"sourceMap":{"File":"genbank.R","Line":"89","Method":{"Method":"save_nucleotide_embedding","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"save_nucleotide_embedding"},"imports_genomic_refseq":{"author":null,"declares":{"name":"imports_genomic_refseq","parameters":[{"name":"biocad.registry","text":null},{"name":"gbff","text":null}],"sourceMap":{"File":"genomic.R","Line":"1","Method":{"Method":"imports_genomic_refseq","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"imports_genomic_refseq"},"check_metabolite":{"author":null,"declares":{"name":"check_metabolite","parameters":[{"name":"biocad.registry","text":null},{"name":"compound","text":null}],"sourceMap":{"File":"check_metabolite.R","Line":"42","Method":{"Method":"check_metabolite","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"The function performs the following steps: \\enumerate{ \\item Extracts and validates chemical formula (calculates exact mass) \\item Queries database using cross-reference identifiers (xrefs) \\item Performs mass tolerance search (±1 Da) \\item If xref search fails, calls \\code{check_metabolite_synonym} to check by name and synonyms }","examples":null,"keywords":[],"parameters":[{"name":"biocad_registry","text":"A database connection object representing the BioCAD registry database."},{"name":"compound","text":"A list containing metabolite information with the following elements: \\itemize{ \\item{xref - List of cross-references (database identifiers)} \\item{formula - Chemical formula string} \\item{name - Common name of the compound} \\item{synonym - Vector of alternative names\/synonyms} }"}],"returns":"An integer representing the unique database ID of the matched compound. Returns \\code{NULL} if no matching metabolite is found in the database.","see_also":null,"title":"Check if metabolite exists in database Searches for a metabolite in the BioCAD registry database by cross-references (xrefs) and exact mass. If no direct xref matches are found, falls back to checking common names and synonyms. Returns database ID if found."},"check_metabolite_synonym":{"author":null,"declares":{"name":"check_metabolite_synonym","parameters":[{"name":"biocad.registry","text":null},{"name":"compound","text":null}],"sourceMap":{"File":"check_metabolite.R","Line":"111","Method":{"Method":"check_metabolite_synonym","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"Operates in two phases: \\enumerate{ \\item Direct name match with mass tolerance \\item MD5 hash-based synonym search if name match fails }","examples":null,"keywords":["internal"],"parameters":[{"name":"biocad_registry","text":"A database connection object for BioCAD registry"},{"name":"compound","text":"Compound list (see \\code{check_metabolite} for structure)"}],"returns":"An integer database ID if match found by name\/synonym, otherwise \\code{NULL}.","see_also":null,"title":"Internal metabolite synonym checker Helper function that searches for metabolites by name and synonyms when direct xref matching fails. Uses exact mass and MD5 hashing of synonyms for efficient lookup."},"find_molecule":{"author":null,"declares":{"name":"find_molecule","parameters":[{"name":"biocad.registry","text":null},{"name":"meta","text":null},{"name":"xref.id","text":null}],"sourceMap":{"File":"find_molecule.R","Line":"55","Method":{"Method":"find_molecule","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":null,"keywords":[],"parameters":[{"name":"biocad_registry","text":"A BioCAD registry connection object representing the database interface."},{"name":"meta","text":"A list containing metabolite metadata. Expected elements: \\itemize{ \\item \\code{name}: (string) Common name of the metabolite \\item \\code{formula}: (string) Chemical formula \\item \\code{description}: (string) Optional descriptive text }"},{"name":"xref_id","text":"(string) Cross-referencing identifier used for database lookup"}],"returns":"Returns a metabolite object if found\/registered successfully. Returns \\code{NULL} if: \\itemize{ \\item Metabolite not found and failed to register \\item Invalid input parameters \\item Database errors occur }","see_also":null,"title":"Find or Register a Target Metabolite in BioCAD Registry This function searches for a metabolite in the BioCAD registry using cross-referencing IDs. If not found, it attempts to register a new metabolite entry with provided metadata."},"__push_compound_metadata":{"author":null,"declares":{"name":"__push_compound_metadata","parameters":[{"name":"biocad.registry","text":null},{"name":"compound","text":null},{"name":"mol","text":null}],"sourceMap":{"File":"push_compound_metadata.R","Line":"87","Method":{"Method":"__push_compound_metadata","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"The `compound` parameter must be a structured list with the following fields: ```r list( ID = \"unique-id\",               # Required: Unique identifier (character) formula = \"formula-string\",     # Required: Chemical formula (character) exact_mass = 0,                 # Required: Exact mass (numeric) name = \"name_string\",           # Required: Common name (character) IUPACName = \"name_string\",      # Required: IUPAC name (character) description = \"description_string\",  # Optional: Description (character) synonym = c(\"synonyms\", \"names\"),    # Optional: Character vector of synonyms xref = list(                    # Optional: Cross-references to external databases chebi = \"\",                 # Use \"\" or omit if unavailable KEGG = \"\", pubchem = \"\", HMDB = \"\", Wikipedia = \"\", lipidmaps = \"\", MeSH = \"\", MetaCyc = \"\", foodb = \"\", CAS = \"\", InChIkey = \"\",              # Note: InChIkey\/InChI\/SMILES are stripped from xref InChI = \"\",                 #   and processed separately SMILES = \"\" ) ) ``` ### Processing Logic: 1. ​**Structure Handling**: - SMILES strings are parsed (non-strictly) and stored in `sequence_graph` if valid. Invalid SMILES are skipped. - InChIkey, InChI, and SMILES fields are removed from `xref` to avoid duplication; SMILES is explicitly stored in `sequence_graph`. 2. ​**Cross-References**: - Valid `xref` entries (non-empty strings) are added to `db_xrefs`, linked to the molecule's `id`. Each entry is checked for duplicates before insertion. 3. ​**Synonyms**: - Synonyms are stored in the `synonym` table with MD5 hashes to prevent duplicates. Only English (`lang = 'en'`) synonyms are supported.","examples":null,"keywords":[],"parameters":[{"name":"biocad_registry","text":"An object representing the biocad registry database where metadata will be stored. Must provide access to tables \"sequence_graph\", \"db_xrefs\", and \"synonym\"."},{"name":"compound","text":"A list containing the compound's metadata. Must follow the structure specified in the Details section."},{"name":"mol","text":"A molecule record from the current `biocad_registry`. Must contain a character `id` property to associate metadata with this molecule."}],"returns":"Invisibly returns `NULL`. This function is called for its side effects.","see_also":null,"title":"Save compound metadata to a biocad registry This function stores compound metadata into a biocad registry, updating several related tables including sequence_graph, db_xrefs, and synonyms."},"push_reaction":{"author":null,"declares":{"name":"push_reaction","parameters":[{"name":"biocad.registry","text":null},{"name":"reaction","text":null},{"name":"source.db","text":null}],"sourceMap":{"File":"push_reactions.R","Line":"81","Method":{"Method":"push_reaction","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"This function adds or updates a reaction entry in the biocad registry database, including associated enzymes, database cross-references, and metabolite compounds.","details":"The `reaction` argument must be a list with the following structure: ```r list( entry = \"unique_id\",                 # Unique identifier for the reaction (string) definition = \"name\",                  # Reaction name or equation (string) comment = \"description_string\",       # Optional description or notes (string) enzyme = list(\"ec_number1\", ...),     # List of EC numbers (strings) for enzymatic regulation db_xrefs = list(                      # List of cross-references to external databases list(name = \"dbname\", text = \"xref_id\"), ... ), compounds = list(                     # List of compounds involved in the reaction list( side = \"role_string\",           # Compound role (e.g., \"substrate\", \"product\", \"*\" for unknown) compound = list(                # Compound details entry = \"compound_id\", name = \"compound_name\", formula = \"chemical_formula\", factor = stoichiometric_factor  # Numeric (default = 1.0 if missing) ) ), ... ) ) ``` - If a reaction with the same `entry` exists, it will be ​**updated**​ with new data. - Enzymes, cross-references, and compounds are linked to the reaction entry. Duplicates are skipped. - Compounds with `side = \"*\"` are ignored (used for placeholder entries).","examples":null,"keywords":[],"parameters":[{"name":"biocad_registry","text":"An object representing the connection to the biocad registry database."},{"name":"reaction","text":"A list containing the reaction data to be pushed into the database. See \"Details\" for the required structure."},{"name":"source_db","text":"integer key reference to the vocabulary term table for reference to the name of the source data of current reaction model data"}],"returns":"Invisibly returns `NULL`. The function's primary purpose is to modify the database.","see_also":null,"title":"Push a single reaction model into the biocad registry database"},"get_genbank":{"author":null,"declares":{"name":"get_genbank","parameters":[{"name":"asm.id","text":null},{"name":"repo.dir","text":"'.\/'"}],"sourceMap":{"File":"ncbi_ftp.R","Line":"37","Method":{"Method":"get_genbank","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"The function: \\enumerate{ \\item Parses the assembly ID into prefix and numeric components \\item Constructs the NCBI FTP directory path using the ID structure \\item Retrieves the compressed GenBank file (*_genomic.gbff.gz) \\item Downloads the file to the specified local directory }","examples":null,"keywords":[],"parameters":[{"name":"asm_id","text":"Character. NCBI GenBank assembly accession ID in the format \"prefix_Integers\" (e.g., \"GCF_123456789\"). The prefix typically indicates the assembly type (e.g., GCF\/GCA), followed by a 9+ digit identifier."},{"name":"repo_dir","text":"Character. Local directory path to save the downloaded file. Defaults to the current working directory (\".\/\")."}],"returns":"Invisibly returns the full path to the downloaded file. Primarily called for its side effect of downloading the GenBank file to the specified directory.","see_also":null,"title":"Download GenBank Assembly File from NCBI FTP Server This helper function constructs the NCBI FTP path for a given assembly ID, retrieves the corresponding GenBank genomic file (*.gbff.gz), and downloads it to a local directory."}}