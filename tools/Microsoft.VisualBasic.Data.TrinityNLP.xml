<?xml version="1.0"?>
<doc>
<assembly>
<name>
Microsoft.VisualBasic.Data.TrinityNLP
</name>
</assembly>
<members>
<member name="M:Microsoft.VisualBasic.Data.NLP.Bigram.ParseLine(System.String[])">
 <summary>
 
 </summary>
 <param name="words">a collection of the words, should be segmentation and 
 keeps in the original input orders</param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.Bigram.ParseText(System.String)">
 <summary>
 implements the bigram parser
 </summary>
 <param name="text"></param>
 <returns></returns>
 
</member>
<member name="T:Microsoft.VisualBasic.Data.NLP.Article">
 <summary>
 文章正文数据模型
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.Data.NLP.Article.title">
 <summary>
 文章标题
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.Data.NLP.Article.content">
 <summary>
 正文文本
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.Data.NLP.Article.contentWithTags">
 <summary>
 带标签正文
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.Data.NLP.Article.publishDate">
 <summary>
 文章发布时间
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.Data.NLP.Html2Article">
 <summary>
 解析Html页面的文章正文内容,基于文本密度的HTML正文提取类
 https://github.com/stanzhai/Html2Article
 http://www.cnblogs.com/jasondan/p/3497757.html
 
 Date:   2012/12/30
 Update: 
     2013/7/10   优化文章头部分析算法，优化
     2014/4/25   添加Html代码中注释过滤的正则
         
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.Data.NLP.Html2Article.AppendMode">
 <summary>
 是否使用追加模式，默认为false
 使用追加模式后，会将符合过滤条件的所有文本提取出来
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.Data.NLP.Html2Article.Depth">
 <summary>
 按行分析的深度，默认为6
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.Data.NLP.Html2Article.LimitCount">
 <summary>
 字符限定数，当分析的文本数量达到限定数则认为进入正文内容
 默认180个字符数
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.Html2Article.GetArticle(System.String)">
 <summary>
 从给定的Html原始文本中获取正文信息
 </summary>
 <param name="html"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.Html2Article.FormatTag(System.Text.RegularExpressions.Match)">
 <summary>
 格式化标签，剔除匹配标签中的回车符
 </summary>
 <param name="match"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.Html2Article.GetTitle(System.String)">
 <summary>
 获取时间
 </summary>
 <param name="html"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.Html2Article.GetPublishDate(System.String)">
 <summary>
 获取文章发布日期
 </summary>
 <param name="html"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.Html2Article.GetContent(System.String,System.String@,System.String@)">
 <summary>
 从body标签文本中分析正文内容
 </summary>
 <param name="bodyText">只过滤了script和style标签的body文本内容</param>
 <param name="content">返回文本正文，不包含标签</param>
 <param name="contentWithTags">返回文本正文包含标签</param>
</member>
<member name="T:Microsoft.VisualBasic.Data.NLP.UrlUtility">
 <summary>
 Url处理辅助类
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.UrlUtility.FixUrl(System.String,System.String)">
 <summary>
 基于baseUrl，补全html代码中的链接
 </summary>
 <param name="baseUrl"></param>
 <param name="html"></param>
</member>
<member name="T:Microsoft.VisualBasic.Data.NLP.Model.Counter">
 <summary>
 counter for a specific token string
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.Data.NLP.Model.Paragraph">
 <summary>
 a collection of the text <see cref="T:Microsoft.VisualBasic.Data.NLP.Model.Sentence"/>.
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.Model.Paragraph.SplitParagraph(System.String)">
 <summary>
 split a given text into multiple paragraph text data
 </summary>
 <param name="text"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.Model.Paragraph.GetParagraph(System.String,System.Char[],System.Boolean)">
 <summary>
 
 </summary>
 <param name="text"></param>
 <param name="delimiter">
 the delimiter of the sentences, usually be delimiter symbol ./?/! to end a sentence.
 </param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.Data.NLP.Model.Sentence">
 <summary>
 a collection of the <see cref="T:Microsoft.VisualBasic.Data.Trinity.NLP.Word"/>
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.Data.NLP.Model.Sentence.words">
 <summary>
 带有前后顺序的单词列表
 </summary>
 <returns></returns>
</member>
<member name="P:Microsoft.VisualBasic.Data.NLP.Model.Sentence.size">
 <summary>
 the words count in current sentence
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.Model.Sentence.matchIndex(System.String)">
 <summary>
 exactly token matched
 </summary>
 <param name="token"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.Model.Sentence.searchIndex(System.String)">
 <summary>
 search for starts with [prefix]
 </summary>
 <param name="token"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.Model.Sentence.ChemicalNameRule(System.String[])">
 <summary>
 try to fix of the un-expected token split for the chemical name
 </summary>
 <param name="tokens"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.Data.NLP.Model.SentenceCharWalker">
 <summary>
 Parse a line of sentence to a set of the word tokens
 </summary>
</member>
<member name="T:Microsoft.VisualBasic.Data.NLP.Model.TokenCounter`1">
 <summary>
 计数器
 最初代码来自Ansj的tree-split包中的love.cq.util;
 @author fangy </summary>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.Model.TokenCounter`1.add(`0,System.Int32)">
 <summary>
 增加一个元素，并增加其计数 </summary>
 <param name="t"> 元素 </param>
 <param name="n"> 计数 </param>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.Model.TokenCounter`1.add(`0)">
 <summary>
 增加一个元素，计数默认增加1 </summary>
 <param name="t"> 元素 </param>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.Model.TokenCounter`1.get(`0)">
 <summary>
 获得某个元素的计数 </summary>
 <param name="t"> 待查询的元素 </param>
 <returns> 数目 </returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.Model.TokenCounter`1.size">
 <summary>
 获取哈希表中键的个数 </summary>
 <returns> 键的数量 </returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.Model.TokenCounter`1.remove(`0)">
 <summary>
 删除一个元素 </summary>
 <param name="t"> 元素 </param>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.Model.TokenCounter`1.keySet">
 <summary>
 输出已构建好的哈希计数表 </summary>
 <returns> 哈希表 </returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.Model.TokenCounter`1.ToString">
 <summary>
 将计数器转换为字符串 </summary>
 <returns> 字符串 </returns>
</member>
<member name="T:Microsoft.VisualBasic.Data.NLP.NLPExtensions">
 <summary>
 从现有的理论和技术现状看，通用的、高质量的自然语言处理系统，仍然是较长期的努力目标，
 但是针对一定应用，具有相当自然语言处理能力的实用系统已经出现，有些已商品化，甚至
 开始产业化。典型的例子有：
 
 + 多语种数据库和专家系统的自然语言接口
 + 各种机器翻译系统
 + 全文信息检索系统
 + 自动文摘系统
 
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.NLPExtensions.KeyPhrases(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
 <summary>
 
 </summary>
 <param name="keywordsSet">Selects from the output result of <see cref="M:Microsoft.VisualBasic.Data.NLP.NLPExtensions.KeyWords(Microsoft.VisualBasic.Data.GraphTheory.Analysis.PageRank.GraphMatrix)"/></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.NLPExtensions.Abstract(Microsoft.VisualBasic.Data.GraphTheory.Analysis.PageRank.WeightedPRGraph,System.Int32,System.Double)">
 <summary>
 获取最重要的num个长度大于等于sentence_min_len的句子用来生成摘要。
 </summary>
 <param name="text"></param>
 <returns></returns>
 
</member>
<member name="T:Microsoft.VisualBasic.Data.NLP.POSTagger.BrillTransformationRules">
 <summary>
 
 </summary>
 <remarks>
 https://github.com/Korthax/pos-net
 </remarks>
</member>
<member name="F:Microsoft.VisualBasic.Data.NLP.StopWords.stopwords">
 <summary>
 https://www.ranks.nl/stopwords/
 </summary>
</member>
<member name="P:Microsoft.VisualBasic.Data.NLP.StopWords.DefaultStopWords">
 <summary>
 Using list of stop words from https://www.ranks.nl/stopwords/ as default.
 </summary>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.StopWords.Removes(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Removes all of the stop words from the <paramref name="tokens"/> list.
 </summary>
 <param name="tokens"></param>
 <returns></returns>
</member>
<member name="T:Microsoft.VisualBasic.Data.NLP.TextRank">
 <summary>
 This module implements TextRank, an unsupervised keyword
 significance scoring algorithm. TextRank builds a weighted
 graph representation Of a document Using words As nodes
 And coocurrence frequencies between pairs of words as edge 
 weights.It then applies PageRank to this graph, And
 treats the PageRank score of each word as its significance.
 The original research paper proposing this algorithm Is
 available here

 > https://web.eecs.umich.edu/~mihalcea/papers/mihalcea.emnlp04.pdf
 
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.Data.NLP.TextRank.sdeli">
 <summary>
 Delimiter that using for split the large text block into seperated sentenses.
 </summary>
</member>
<member name="F:Microsoft.VisualBasic.Data.NLP.TextRank.allSymbols">
 <summary>
 Split text as words
 </summary>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.TextRank.TextRankGraph(System.Collections.Generic.IEnumerable{System.String},System.Int32,Microsoft.VisualBasic.Data.NLP.StopWords)">
 <summary>
 ##### 使用TextRank提取关键字
 
 将原文本拆分为句子，在每个句子中过滤掉停用词（可选），并只保留指定词性的单词（可选）。由此可以得到句子的集合和单词的集合。
 每个单词作为pagerank中的一个节点。设定窗口大小为k，假设一个句子依次由下面的单词组成
 
 ```
 w1, w2, w3, w4, w5, ..., wn
 ```
 
 ``w1, w2, ..., wk``、``w2, w3, ...,wk+1``、``w3, w4, ...,wk+2``等都是一个窗口。在一个窗口中的任两个单词对应的节点之间存在一个无向无权的边。
 基于上面构成图，可以计算出每个单词节点的重要性。最重要的若干单词可以作为关键词。
 </summary>
 <param name="sentences"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.TextRank.TextGraph(System.String,System.Double)">
 <summary>
 Using for generate article's <see cref="M:Microsoft.VisualBasic.Data.NLP.NLPExtensions.Abstract(Microsoft.VisualBasic.Data.GraphTheory.Analysis.PageRank.WeightedPRGraph,System.Int32,System.Double)"/>
 </summary>
 <param name="text$"></param>
 <param name="similarityCut#"></param>
 <returns></returns>
</member>
<member name="M:Microsoft.VisualBasic.Data.NLP.TextRank.Similarity(System.String[],System.String[])">
 <summary>
 默认的用于计算两个句子相似度的函数。
 </summary>
 <param name="wordList1">分别代表两个句子，都是由单词组成的列表</param>
 <param name="wordList2">分别代表两个句子，都是由单词组成的列表</param>
 <returns></returns>
</member>
</members>
</doc>
